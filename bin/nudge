#!/usr/bin/env python
"""
A simple tool for telling an idle service to "wake up and do your thing."

You can run nudge in 'listening mode' by adding the --listen argument. It will
block indefinitely until a connection is made on the unix socket or network
port identified by PORT, then immediately exit(0).

If you already have an instance of nudge running listening mode, you can nudge
it by specifying a HOST (an IP address, hostname, or just '-' for localhost).
"""
from __future__ import (
    absolute_import, division, unicode_literals, print_function)

import sys
import os.path
import socket
from argparse import ArgumentParser


VERBOSE = False

NUDGE_MESSAGE = "nudge!"


def _verbose(message):
    cmd = os.path.basename(sys.argv[0])
    if VERBOSE:
        sys.stderr.write("%s: %s\n" % (cmd, message))


class FatalError(Exception):
    pass


def _is_udp(endpoint):
    try:
        int(endpoint)
        return True
    except ValueError:
        return False


def _listen(endpoint):
    if _is_udp(endpoint):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.bind(("127.0.0.1", int(endpoint)))
        _verbose("Listening for UDP packet on port %s" % endpoint)
        data, remote_addr = sock.recvfrom(1024)
        _verbose("Received UDP packet from %s: %r" % (remote_addr, data))
    else:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        conn = None
        try:
            sock.bind(endpoint)
            sock.listen(1)
            _verbose("Listening on %s" % endpoint)
            try:
                conn, client_addr = sock.accept()
            except KeyboardInterrupt:
                _verbose("Interrupted")
                sys.exit(1)
            _verbose("Nudge from %r" % endpoint)
        finally:
            sock.close()
            if os.path.exists(endpoint):
                os.unlink(endpoint)
            if conn:
                conn.close()


def _nudge(host, endpoint):
    if _is_udp(endpoint):
        if host == "" or host == "-":
            host = 'localhost'
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        _verbose("Sending UDP packet to %s:%s" % (host, endpoint))
        try:
            sock.sendto(NUDGE_MESSAGE, (host, int(endpoint)))
        except OverflowError:
            raise FatalError("Invalid port: %s" % endpoint)
    else:
        conn = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        try:
            _verbose("Connecting to %s" % endpoint)
            conn.connect(endpoint)
            _verbose("Connection made")
        except socket.error as err:
            raise FatalError(os.strerror(err.errno))
        finally:
            conn.close()


def _opts():
    p = ArgumentParser(description=__doc__,
                       usage='%(prog)s [-h ] [ --listen | HOST ] ENDPOINT')
    p.add_argument('--listen', '-l', default=False, action="store_true",
                   help="Tell nudge to run in 'listening' mode. In listening"
                        " mode, nudge will create the specified unix socket or"
                        " listen for UDP packets on the specified port."
                        " Upon receiving a connection, nudge will exit(0)."
                   )
    p.add_argument('--verbose', '-v', default=False, action="store_true")
    p.add_argument('HOST',
                   default=None,
                   nargs="?",
                   help="The machine to nudge. Use a single '-' for localhost."
                   )
    p.add_argument('ENDPOINT',
                   help="A network port number (integer) or path to a unix"
                        " domain socket.")

    args = p.parse_args()
    if args.HOST:
        if args.listen:
            p.error("--listen and HOST cannot be used together")

        if args.HOST != "" and args.HOST != "-" and not _is_udp(args.ENDPOINT):
            p.error("Can't connect to unix domain socket on another host")

    return args


if __name__ == "__main__":
    args = _opts()
    if args.verbose:
        VERBOSE = True
    try:
        if args.listen:
            _listen(args.ENDPOINT)
        else:
            _nudge(args.HOST, args.ENDPOINT)
    except FatalError as err:
        cmd = os.path.basename(sys.argv[0])
        sys.stderr.write("%s: ERROR: %s\n" % (cmd, err.message))
        sys.exit(1)
